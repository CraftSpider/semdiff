/// A difference algorithm. There are many ways to generate differences, and `semdiff` is generic
/// over these methods. If you don't care about this, the [`Default`] algorithm should implement
/// a useful, human-readable diff for a type, though it has no hard guarantees on what the output
/// will be.
pub trait DiffAlgo<T: ?Sized> {
    /// The difference output type generated by this algorithm.
    type Diff<'a>
    where
        T: 'a;

    /// Do a diff between two instances of [`T`], generating output. This is where the main work
    /// happens.
    fn diff<'a>(l: &'a T, r: &'a T) -> Self::Diff<'a>;
}

/// Trait for differences that have lossless output which can be used to generate the original value
/// from the altered value and the diff.
pub trait DiffPatch<T: ?Sized>: DiffAlgo<T> {}

/// The 'default' difference algorithm. This should generate a diff that can be output in an easily
/// human-readable fashion, but may or may not contain enough information to generate a 'patch' that
/// results in the original object.
pub struct Default;
